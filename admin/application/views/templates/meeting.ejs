<!DOCTYPE html>

<html lang="en">

	<!-- begin::Head -->
	<head>
		<meta charset="utf-8" />
		<title><%= vendor %> | <%= title %></title>
		<meta name="description" content="Latest updates and statistic charts">
		<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, shrink-to-fit=no">

		<%- include('common/header.ejs') %>

		<link rel="stylesheet" type="text/css" href="<%= base_url %>/demo/default/base/style.css">

	</head>

	<!-- end::Head -->

	<!-- begin::Body -->
	<body class="m-page--fluid m--skin- m-content--skin-light2 m-header--fixed m-header--fixed-mobile m-aside-left--enabled m-aside-left--skin-dark m-aside-left--fixed m-aside-left--offcanvas m-footer--push m-aside--offcanvas-default">

		<!-- begin:: Page -->
		<div class="m-grid m-grid--hor m-grid--root m-page">

			<%- include('common/topbar.ejs') %>

			<!-- begin::Body -->
			<div class="m-grid__item m-grid__item--fluid m-grid m-grid--ver-desktop m-grid--desktop m-body">

				<%- include('common/leftbar.ejs') %>

				<div class="m-grid__item m-grid__item--fluid m-wrapper">

					<!-- BEGIN: Subheader -->
					<div class="m-subheader ">
						<div class="d-flex align-items-center">
							<div class="mr-auto">
								<h3 class="m-subheader__title m-subheader__title--separator">Meeting</h3>
								<ul class="m-subheader__breadcrumbs m-nav m-nav--inline">
									<li class="m-nav__item m-nav__item--home">
										<a href="<%= base_url %>/meeting" class="m-nav__link m-nav__link--icon">
											<i class="m-nav__link-icon la la-home"></i>
										</a>
									</li>
									<li class="m-nav__separator">-</li>
									<li class="m-nav__item">
										<a href="" class="m-nav__link">
											<span class="m-nav__link-text">Meeting</span>
										</a>
									</li>
								</ul>
							</div>
						</div>
					</div>

					<!-- END: Subheader -->
					<div class="m-content">

                        <%- include(path) %>
                        
					</div>
				</div>
			</div>

			<!-- end:: Body -->

			<%- include('common/footer_content.ejs') %>

		</div>

		<!-- end:: Page -->

		<%- include('common/footer.ejs') %>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.3.0/socket.io.js"></script>
		
		<script type="text/javascript">

			const socket = io.connect('http://35.245.107.78');

			var addMeetingFormControl = {
				init:function() {
					$("#addMeetingForm").validate( {
						rules: {
							meetingId: {
								required: true
							},
							meetingDate: {
								required: true
							},
							meetingTime: {
								required: true
							},
							meetingDuration: {
								required: true
							},
							meetingParticipant: {
								number: true
							},
							meetingPassword: {
								required: true
							},
							meetingConfirmPassword: {
								required: true,
               	 				equalTo: "#meetingPassword"
							}
						},
						messages: {
							meetingId: {
								required: "Please enter meeting ID"
							},
							meetingDate: {
								required: "Please select meeting date"
							},
							meetingTime: {
								required: "Please select meeting time"
							},
							meetingDuration: {
								required: "Please enter meeting duration"
							},
							meetingParticipant: {
								number: "Please enter valid number"
							},
							meetingPassword: {
								required: "Please enter password"
							},
							meetingConfirmPassword: {
								required: "Please enter confirm password",
								equalTo: "Please enter the same password as above"
							}

						}
						, invalidHandler:function(e, r) {
							mUtil.scrollTop()
						}
						, submitHandler:function(form) {

							$("#addMeetingBtn").addClass("m-loader m-loader--right m-loader--light").attr("disabled", !0);

							var data 				= {};
							data.meetingName 		= $("#meetingName").val();
							data.meetingId 			= $("#meetingId").val();	
							data.meetingDate 		= $("#meetingDate").val();
							data.meetingTime 		= $("#meetingTime").val();
							data.meetingDuration 	= $("#meetingDuration").val();
							data.meetingParticipant = $("#meetingParticipant").val();
							data.meetingPassword 	= $("#meetingPassword").val();
						
							$.ajax({
								type: 'POST',
								data: JSON.stringify(data),
								contentType: 'application/json',
								url: '<%= base_url %>/meeting/add',
								success: function(data) 
								{
									response = JSON.parse(data);
									if(response.response)
									{   
										$('#addMeetingForm').trigger("reset");
										$(".meeting_list").mDatatable("reload");
										toastr.success(response.message);
										setTimeout(function() {
											$('#addMeetingModal').modal('hide');
										}, 1000);
										setTimeout(function() {
											$("#addMeetingBtn").removeClass("m-loader m-loader--right m-loader--light").attr("disabled", !1);  
										}, 2000);
									}
									else
									{ 
										$("#addMeetingBtn").removeClass("m-loader m-loader--right m-loader--light").attr("disabled", !1);    
										toastr.error(response.message);
									}
								},
								error:function(data)
								{
									$("#addMeetingBtn").removeClass("m-loader m-loader--right m-loader--light").attr("disabled", !1); 
									toastr.error("Something went wrong!");
								}
							});

						}
					}
					)
				}
			};

			function addMeeting() {

				var data = {};
				data.type = 'add-meeting';	

				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/add-modal',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{   
							$('#meetingTime').timepicker('setTime', response.time);
							$('#addMeetingForm').trigger("reset");
							$('#meetingDate').val(response.date);
							$('#meetingTime').val(response.time);
							$('#addMeetingModal').modal('show');
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
				
			}

    
			var t;
			var DatatableRemoteAjaxDemo= {
				init:function() {
					t=$(".meeting_list").mDatatable( {
						data: {
							type:"remote", source: {
								read: {
									url:"<%= base_url %>/meeting/list", map:function(t) {
										var e=t;
										return void 0!==t.data&&(e=t.data), e
									}
								}
							}
							, pageSize:10, serverPaging:!0, serverFiltering:!0, serverSorting:!0
						}
						, layout: {
							scroll: !1, footer: !1
						}
						, sortable:!0, pagination:!0, toolbar: {
							items: {
								pagination: {
									pageSizeSelect: [10, 20, 30, 50, 100]
								}
							}
						}
						, search: {
							input: $("#generalSearch")
						}
						, columns:[ 
				  
							{
								field: "mt_mid", title: "Meeting ID", selector: !1, textAlign: "center", sortable: !1
							},
				  			{
								field:"mt_name", title:"Name", filterable:!1, textAlign: "center", sortable: !1
							},
							{
								field:"Date", title:"Date", sortable:!1, overflow:"visible", template:function(t, e, a) {
									var date = new Date(t.mt_date);
									return date.toISOString().slice(0,10);
								}
							},
				  			{
								field:"mt_time", title:"Time", filterable:!1, textAlign: "center", sortable: !1
							},
				  			{
								field:"mt_duration", title:"Duration", filterable:!1, textAlign: "center", sortable: !1
							},
				  			{
								field:"mt_participant", title:"Participant", filterable:!1, textAlign: "center", sortable: !1
							},
							{
								field:"Status", title:"Status", sortable:!1, overflow:"visible", template:function(t, e, a) {
									
									if(t.mt_status == 'Active')
									{
										var q = new Date();
										var currentDate = q.getFullYear() + "-" + (q.getMonth()+1) + "-" + q.getDate();
										var date   = new Date(currentDate);
										var mydate = new Date(t.mt_date);

										if(date  >mydate)
										{
											return '<a href="javascript:void(0)" class="btn btn-outline-primary m-btn m-btn--icon btn-lg m-btn--icon-only m-btn--pill m-btn--air"><i class="la la-history"></i></a>'
										}
										else
										{
											return '<a href="javascript:void(0)" class="btn btn-outline-primary m-btn m-btn--icon btn-lg m-btn--icon-only m-btn--pill m-btn--air"  onclick="changeMeetingStatus('+ t.mt_id +')"><i class="la la-history"></i></a>'
										}										
									}
									else
									{
										var q = new Date();
										var currentDate = q.getFullYear() + "-" + (q.getMonth()+1) + "-" + q.getDate();
										var date   = new Date(currentDate);
										var mydate = new Date(t.mt_date);
										if(date > mydate)
										{
											return '<a href="javascript:void(0)" class="btn btn-outline-brand m-btn m-btn--icon btn-lg m-btn--icon-only m-btn--pill m-btn--air" ><i class="la la-power-off"></i></a>'
										}
										else
										{
											return '<a href="javascript:void(0)" class="btn btn-outline-brand m-btn m-btn--icon btn-lg m-btn--icon-only m-btn--pill m-btn--air" onclick="changeMeetingStatus('+ t.mt_id +')"><i class="la la-power-off"></i></a>'
										}
									}
									
								}
							},
							{
								field:"Actions", title:"Actions", sortable:!1, overflow:"visible", template:function(t, e, a){
									var q = new Date();
									var currentDate = q.getFullYear() + "-" + (q.getMonth()+1) + "-" + q.getDate();
									var date   = new Date(currentDate);
									var mydate = new Date(t.mt_date);
									if(date  >mydate)
									{
										return '<a href="javascript:void(0)" class="m-portlet__nav-link btn m-btn m-btn--hover-brand m-btn--icon m-btn--icon-only m-btn--pill" title="Update Meeting"><i class="la la-edit"></i></a>'
									}
									else
									{
										return '<a href="javascript:void(0)" class="m-portlet__nav-link btn m-btn m-btn--hover-brand m-btn--icon m-btn--icon-only m-btn--pill" title="Update Meeting" onclick="editMeeting('+ t.mt_id +')"><i class="la la-edit"></i></a>'
									}
								}
							},
							{
								field:"Monitor", title:"Monitor", sortable:!1, overflow:"visible", template:function(t, e, a){
									var q = new Date();
									var currentDate = q.getFullYear() + "-" + (q.getMonth()+1) + "-" + q.getDate();
									var date   = new Date(currentDate);
									var mydate = new Date(t.mt_date);
									if(date  >mydate)
									{
										return '<a href="javascript:void(0);" ><img alt="Monitor" src="<%= base_url %>/demo/default/base/clock_logo.jpg" style="width: 75px;"></a>'
									}
									else
									{
										return '<a href="javascript:void(0);" onclick="monitor('+ t.mt_id +')" ><img alt="Monitor" src="<%= base_url %>/demo/default/base/clock_logo.jpg" style="width: 75px;"></a>'
									}
								}
							}
						]
					});
				}
			};

			var BootstrapDatepicker=function() {
				var t;
				t=mUtil.isRTL()? {
					leftArrow: '<i class="la la-angle-right"></i>', rightArrow: '<i class="la la-angle-left"></i>'
				}
				: {
					leftArrow: '<i class="la la-angle-left"></i>', rightArrow: '<i class="la la-angle-right"></i>'
				}
				;
				return {
					init:function() {
						$("#meetingDate, #editMeetingDate").datepicker( {
							rtl: mUtil.isRTL(), todayHighlight: !0, orientation: "bottom left", templates: t, startDate: '+0d', autoclose: !0, format: 'yyyy-mm-dd'
						}
						)
					}
				}
			}
			();

			var BootstrapTimepicker= {
				init:function() {
					$("#meetingDuration, #editMeetingDuration").timepicker( {
						minuteStep: 1, showSeconds: !0, showMeridian: !1, snapToStep: !0, autoclose: !0
					}
					),
					$("#meetingTime, #editMeetingTime").timepicker( {
						minuteStep: 1, showSeconds: !0, showMeridian: !0, autoclose: !0
					}
					)
				}
			};
	  
		 	jQuery(document).ready(function() {
				DatatableRemoteAjaxDemo.init()
				addMeetingFormControl.init()
				updateMeetingFormControl.init()
				BootstrapDatepicker.init()
				BootstrapTimepicker.init()
			});	
			
			function changeMeetingStatus(id)
			{
				var data = {};
				data.type = 'change_status';
				data.id = id;	
			
				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/change-status',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{   
							socket.emit('meeting-status', data);
							$(".meeting_list").mDatatable("reload");
							toastr.success(response.message);
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
			}

			function editMeeting(id) {
				var data = {};
				data.type = 'edit-meeting';
				data.id = id;	
			
				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/details',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{   
							$("#editMeetingName").val(response.data.mt_name);
							$("#editMeetingId").val(response.data.mt_mid);
							var date = new Date(response.data.mt_date);
							var mtdate = date.toISOString().slice(0,10);
							$("#editMeetingDate").val(mtdate);
							$("#editMeetingTime").val(response.data.mt_time);
							$('#editMeetingTime').timepicker('setTime', response.data.mt_time);
							$("#editMeetingDuration").val(response.data.mt_duration);
							$('#editMeetingDuration').timepicker('setTime', response.data.mt_duration);
							$("#editMeetingParticipant").val(response.data.mt_participant);
							$("#editMeetingUpdateId").val(response.data.mt_id);
							$('#editMeetingModal').modal('show');
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
			}

			var updateMeetingFormControl = {
				init:function() {
					$("#editMeetingForm").validate( {
						rules: {
							editMeetingId: {
								required: true
							},
							editMeetingDate: {
								required: true
							},
							editMeetingTime: {
								required: true
							},
							editMeetingDuration: {
								required: true
							},
							editMeetingParticipant: {
								number: true
							}
						},
						messages: {
							editMeetingId: {
								required: "Please enter meeting ID"
							},
							editMeetingDate: {
								required: "Please select meeting date"
							},
							editMeetingTime: {
								required: "Please select meeting time"
							},
							editMeetingDuration: {
								required: "Please enter meeting duration"
							},
							editMeetingParticipant: {
								number: "Please enter valid number"
							}
						}
						, invalidHandler:function(e, r) {
							mUtil.scrollTop()
						}
						, submitHandler:function(form) {

							$("#updateMeetingBtn").addClass("m-loader m-loader--right m-loader--light").attr("disabled", !0);

							var data = {};
							data.editMeetingName = $("#editMeetingName").val();
							data.editMeetingId = $("#editMeetingId").val();	
							data.editMeetingDate = $("#editMeetingDate").val();
							data.editMeetingTime = $("#editMeetingTime").val();
							data.editMeetingDuration = $("#editMeetingDuration").val();
							data.editMeetingParticipant = $("#editMeetingParticipant").val();
							data.editMeetingUpdateId = $("#editMeetingUpdateId").val();
						
							$.ajax({
								type: 'POST',
								data: JSON.stringify(data),
								contentType: 'application/json',
								url: '<%= base_url %>/meeting/update',
								success: function(data) 
								{
									response = JSON.parse(data);
									if(response.response)
									{   
										$(".meeting_list").mDatatable("reload");
										toastr.success(response.message);
										setTimeout(function() {
											$('#editMeetingModal').modal('hide');
										}, 1000);
										setTimeout(function() {
											$("#updateMeetingBtn").removeClass("m-loader m-loader--right m-loader--light").attr("disabled", !1);
										}, 2000);
									}
									else
									{     
										$("#updateMeetingBtn").removeClass("m-loader m-loader--right m-loader--light").attr("disabled", !1); 
										toastr.error(response.message);
									}
								},
								error:function(data)
								{
									$("#updateMeetingBtn").removeClass("m-loader m-loader--right m-loader--light").attr("disabled", !1);
									toastr.error("Something went wrong!");
								}
							});

						}
					}
					)
				}
			};
		
			function monitor(id) {
				var data = {};
				data.type = 'monitor';
				data.id = id;	
			
				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/monitor',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{   
							toastr.success(response.message);
							if(response.instant)
							{
								$("#monitorMeetingId").val(response.data.mt_id);
								$("#monitorMeetingTitle").html(response.data.mt_name+' -- '+response.data.mt_mid);
								$("#monitorMeetingModal").modal('show');
								setTimeout(function() {
									startClock(response.mseconds)
								}, response.afterstart);
							}
							else
							{
								if(response.action == 'pause')
								{
									startClock(response.mseconds)
									clear(interval)
								}
								else
								{
									startClock(response.mseconds)
								}								
								$("#monitorMeetingId").val(response.data.mt_id);
								$("#monitorMeetingTitle").html(response.data.mt_name+' -- '+response.data.mt_mid);
								$("#monitorMeetingModal").modal('show');
							}
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
			}

			const timer = $('#timer')
			const s = $(timer).find('.seconds')
			const m = $(timer).find('.minutes')
			const h = $(timer).find('.hours')

			var seconds = 0
			var minutes = 0
			var hours = 0

			var interval = null;		

			function startClock(ammount) {
				clear(interval)
				const measure = 's'
				var clockType = 'countdown';

				hasStarted = false
				hasEnded = false

				seconds = 0
				minutes = 0
				hours = 0

				switch (measure) {
					case 's':
						if (ammount > 3599) {
							let hou = Math.floor(ammount / 3600)
							hours = hou
							let min = Math.floor((ammount - (hou * 3600)) / 60)
							minutes = min;
							let sec = (ammount - (hou * 3600)) - (min * 60)
							seconds = sec
						}
						else if (ammount > 59) {
							let min = Math.floor(ammount / 60)
							minutes = min
							let sec = ammount - (min * 60)
							seconds = sec
						}
						else {
							seconds = ammount
						}
						break
					case 'm':
						if (ammount > 59) {
							let hou = Math.floor(ammount / 60)
							hours = hou
							let min = ammount - (hou * 60)
							minutes = min
						}
						else {
							minutes = ammount
						}
						break
					case 'h':
						hours = ammount
						break
					default:
						break
				}

				if (seconds <= 10 && clockType == 'countdown' && minutes == 0 && hours == 0) {
					$(timer).find('span').addClass('red')
				}

				refreshClock()

				$('.input-wrapper').slideUp(350)
				setTimeout(function(){
					$('#timer').fadeIn(350)
					$('#stop-timer').fadeIn(350)

				}, 350)

				switch (clockType) {
					case 'countdown':
							countdown()
							break
					default:
						break;
				}
			}

			function onClock() {
				var data = {};
				data.type = 'meeting pause';
				data.status = 'On';
				data.time = hours+':'+minutes+':'+seconds;
				data.id = $("#monitorMeetingId").val();	
				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/change-cstatus',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{  
							countdown()
							socket.emit('meeting-monitor', data);
							toastr.success(response.message);
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
			}

			function countdown() {
				
				hasStarted = true
				interval = setInterval(() => {
					if(hasEnded == false) {
						if (seconds <= 11 && minutes == 0 && hours == 0) {
						$(timer).find('span').addClass('red')
						}

						if(seconds == 0 && minutes == 0 || (hours > 0  && minutes == 0 && seconds == 0)) {
							hours--
							minutes = 59
							seconds = 60
							refreshClock()
						}

						if(seconds > 0) {
							seconds--
							refreshClock()
						}
						else if (seconds == 0) {
							minutes--
							seconds = 59
							refreshClock()
						}
					}
					else {
						restartClock()
					}

				}, 1000)
			}

			function restartClock() {
				clear(interval)
				hasStarted = false
				hasEnded = false

				seconds = 0
				minutes = 0
				hours = 0

				$(s).text('00')
				$(m).text('00')
				$(h).text('00')
			}

			function pauseClock() {
				var data = {};
				data.type = 'meeting pause';
				data.status = 'Pause';
				data.time = hours+':'+minutes+':'+seconds;
				data.id = $("#monitorMeetingId").val();	
				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/change-cstatus',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{   
							clear(interval)
							socket.emit('meeting-monitor', data);
							toastr.success(response.message);
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
			}

			function refreshClock() {
				const timer = $('#timer')
				const s = $(timer).find('.seconds')
				const m = $(timer).find('.minutes')
				const h = $(timer).find('.hours')
				$(s).text(pad(seconds))
				$(m).text(pad(minutes))
				if (hours < 0) {
					$(s).text('00')
					$(m).text('00')
					$(h).text('00')
				} else {
					$(h).text(pad(hours))
				}

				if (hours == 0 && minutes == 0 && seconds == 0 && hasStarted == true) {
					hasEnded = true
				}
			}

			function pad(d) {
				return (d < 10) ? '0' + d.toString() : d.toString()
			}

			function clear(intervalID) {
				clearInterval(intervalID)
			}

			function stopClock() {
				clear(interval)	
				var data = {};
				data.type = 'meeting pause';
				data.status = 'Suspend';
				data.time = hours+':'+minutes+':'+seconds;
				data.id = $("#monitorMeetingId").val();	
				$.ajax({
					type: 'POST',
					data: JSON.stringify(data),
					contentType: 'application/json',
					url: '<%= base_url %>/meeting/change-cstatus',
					success: function(data) 
					{
						response = JSON.parse(data);
						if(response.response)
						{   
							socket.emit('meeting-monitor', data);
							toastr.error(response.message);
							$("#monitorMeetingModal").modal('hide');
						}
						else
						{      
							toastr.error(response.message);
						}
					},
					error:function(data)
					{
						toastr.error("Something went wrong!");
					}
				});
			}


			var clockID;
			var yourTimeZoneFrom = -4.00; //time zone value where you are at

			var d = new Date();  
			//get the timezone offset from local time in minutes
			var tzDifference = yourTimeZoneFrom * 60 + d.getTimezoneOffset();
			//convert the offset to milliseconds, add to targetTime, and make a new Date
			var offset = tzDifference * 60 * 1000;

			function UpdateClock() {
			    var tDate = new Date(new Date().getTime()+offset);
			    var in_hours = tDate.getHours()
			    var in_minutes=tDate.getMinutes();
			    var in_seconds= tDate.getSeconds();

			    // Pad the minutes and seconds with leading zeros, if required
			  	in_minutes = ( in_minutes < 10 ? "0" : "" ) + in_minutes;
			  	in_seconds = ( in_seconds < 10 ? "0" : "" ) + in_seconds;

			    // Choose either "AM" or "PM" as appropriate
			  	var timeOfDay = ( in_hours < 12 ) ? "AM" : "PM";

			  	// Convert the hours component to 12-hour format if needed
			  	in_hours = ( in_hours > 12 ) ? in_hours - 12 : in_hours;

			  	// Convert an hours component of "0" to "12"
			  	in_hours = ( in_hours == 0 ) ? 12 : in_hours;

			    document.getElementById('liveClock').innerHTML = "" 
			                   + in_hours + ":" 
			                   + in_minutes + ":" 
			                   + in_seconds + " "
			                   + timeOfDay;

			    document.getElementById('addMeetingClock').innerHTML = "" 
			                   + in_hours + ":" 
			                   + in_minutes + ":" 
			                   + in_seconds + " "
			                   + timeOfDay;

			    document.getElementById('updateMeetingClock').innerHTML = "" 
			                   + in_hours + ":" 
			                   + in_minutes + ":" 
			                   + in_seconds + " "
			                   + timeOfDay;

			    document.getElementById('monitorMeetingClock').innerHTML = "" 
			                   + in_hours + ":" 
			                   + in_minutes + ":" 
			                   + in_seconds + " "
			                   + timeOfDay;
			}
			function LiveStartClock() {
			   clockID = setInterval(UpdateClock, 500);
			}

			function KillClock() {
			  clearTimeout(clockID);
			}
			window.onload=function() {
			  LiveStartClock();
			}
		</script>

	</body>

	<!-- end::Body -->
</html>